<!-- vim: syntax=markdown -->
<!-- livebook:{"autosave_interval_s":30,"persist_outputs":true} -->

# Day 10

## Setup

```elixir
input =
  File.read!("aoc2021/day10/input.txt")
  |> String.split("\n", trim: true)
  |> Enum.map(&String.to_charlist/1)

# symbol_list = '{([(<{}[<>[]}>{[]{[(<()>'

lookup_table = %{
  ?) => 3,
  ?] => 57,
  ?} => 1197,
  ?> => 25137
}

symbol_pairs =
  '[]{}()<>'
  |> to_charlist()
  |> Enum.chunk_every(2)
  |> Enum.map(fn row ->
    {Enum.at(row, 0), Enum.at(row, 1)}
  end)

IO.inspect(symbol_pairs)
```

```output
[{91, 93}, {123, 125}, {40, 41}, {60, 62}]
```

```output
[{91, 93}, {123, 125}, {40, 41}, {60, 62}]
```

```elixir
defmodule Recursion do
  def is_expected_symbol(symbol_list, index, symbol_pairs, stack)
      when length(symbol_list) > index do
    symbol = Enum.at(symbol_list, index)

    {start, pend} =
      Enum.find(symbol_pairs, nil, fn pair ->
        {start, pend} = pair
        start == symbol or pend == symbol
      end)

    cond do
      start == symbol ->
        Recursion.is_expected_symbol(symbol_list, index + 1, symbol_pairs, stack ++ [symbol])

      pend == symbol and start == Enum.at(stack, length(stack) - 1) ->
        {_, newstack} = List.pop_at(stack, -1)
        Recursion.is_expected_symbol(symbol_list, index + 1, symbol_pairs, newstack)

      true ->
        {:corrupted, symbol_list, stack, symbol}
    end
  end

  def is_expected_symbol(symbol_list, index, _, stack) when length(symbol_list) <= index do
    {:incomplete, symbol_list, stack, nil}
  end
end
```

```output
{:module, Recursion, <<70, 79, 82, 49, 0, 0, 10, ...>>, {:is_expected_symbol, 4}}
```

## Part 1

```elixir
# take to_char
# if start then push
# if end then check if last push was start
#   if last push was not the start we want then return the this symbol as bad
#   
walked_symbols =
  input
  |> Enum.map(fn symbol_list ->
    Recursion.is_expected_symbol(symbol_list, 0, symbol_pairs, [])
  end)

walked_symbols
|> Enum.filter(fn result ->
  case result do
    {:corrupted, _, _, _} -> true
    _ -> false
  end
end)
|> Enum.reduce(0, fn result, acc ->
  {_, _, _, inval_char} = result
  acc + lookup_table[inval_char]
end)
```

```output
311895
```

## Part 2

```elixir
points_lookup = %{
  ?) => 1,
  ?] => 2,
  ?} => 3,
  ?> => 4
}

incomplete_symbols =
  walked_symbols
  |> Enum.filter(fn result ->
    case result do
      {:incomplete, _, _, _} -> true
      _ -> false
    end
  end)

IO.inspect(incomplete_symbols: incomplete_symbols)

completed_symbols =
  incomplete_symbols
  |> Enum.map(fn row ->
    {_, _, symbol_list, _} = row
    symbol_list
  end)
  |> Enum.map(fn symbol_list ->
    Enum.map(symbol_list, fn symbol ->
      pair =
        Enum.find(symbol_pairs, nil, fn {start, _} ->
          start == symbol
        end)

      {_, pend} = pair
      pend
    end)
    |> Enum.reverse()
  end)

IO.inspect(completed_symbols: completed_symbols)

completed_score =
  completed_symbols
  |> Enum.map(fn symbol_list ->
    Enum.reduce(symbol_list, 0, fn symbol, acc ->
      acc * 5 + points_lookup[symbol]
    end)
  end)

IO.inspect(completed_score: completed_score)

median_score =
  completed_score
  |> Enum.sort()
  |> Enum.at(length(completed_score) |> div(2))
```

```output
[
  incomplete_symbols: [
    {:incomplete,
     '{[<<([{((((<[<[]{}><[]{}>]<<{}{}><[]<>>>><<([]<>)>[({}[])({}[])]>))([[({[]{}})<{{}{}}(())>][[{',
     '{[<<([{((([[[{', nil},
    {:incomplete,
     '({[{({[<<<<<<(()())>>{{([]{}){{}[]}}{<(){}><<>[]>}}>{(<[[][]]{<><>}><<{}<>>{<>{}}>)}>>>]<[{<{<{[(){}]<()()>',
     '({[{({<[{<{<{', nil},
    {:incomplete,
     '[{[{{{[<({<((<()()>[{}()])({<>[]}{[]()}))>[{{[[]()]<{}()>}[<[]<>>{<>{}}]}{[<{}<>>{<>()}][(()<>)[',
     '[{[{{{[<({[{[[', nil},
    {:incomplete,
     '{([<(<{{([[{(((){})[<>[]])<[[]{}][{}<>]>}{[{<>{}}]{<[]()><()[]>}}]])}({[<{(<()<>>)({{}()}[',
     '{([<(<{({[<{([', nil},
    {:incomplete,
     '({[{[[[{{{{[<({}())[[]()]>({<><>}(<>()))]<((()())<{}<>>){{<><>}(()())}>}{<({[][]}<[]()>){{{}()}',
     '({[{[[[{{{{<{', nil},
    {:incomplete,
     '{((<<<<(([(((({}()))[[()()]{{}{}}])(<{{}}{()<>}>((<>[]){{}<>})))({<({}())[<>[]]>[{[]<>}]}[<[{}{}]<',
     '{((<<<<(([([<<', nil},
    {:incomplete,
     '{([<{{{{({{{([(){}])}[<<[]<>>([][])>({[]<>}{[]()})]}}{{[{(<>[]){(){}}}({[]()}{{}{}})]{{{{}()}([]<>)}}}{{',
     '{([<{{{{({{{', nil},
    {:incomplete,
     '({<[({[<{[{(<<()[]>(<><>)>{([][]){()<>}})[(<(){}><{}[]>)(<[]{}>[<>[]])]}]<(<[(()[])[{}[]]]>{[[(){}]([]',
     '({<[({[<{<({[(', nil},
    {:incomplete,
     '<<<{{<([([<(<<{}{}>[<>[]]>(<{}()>[[][]])){<<<>{}>([]())>(([]{}){[]})}><{{{{}[]}<()()>}(<{}<>>{[]<>}',
     '<<<{{<([([<{(', nil},
    {:incomplete,
     '<[[{{<(<[{[{{({}[]){()()}}((()())<()<>>)}][[{(<>[])(<><>)}(<()[]>{{}<>})]]}[{<<<{}<>>><{{}<>}[{}{}]>><',
     '<[[{{<(<[[{<', nil},
    {:incomplete,
     '{{<<(({{[[<({{(){}}}[<<>{}>{[][]}])<{<{}<>><{}{}>}{(<><>)((){})}>>{[{(<>[])([]{})}{<{}[]>}]}]<<[<((){})(<',
     '{{<<(({{[<<[<(<', nil},
    {:incomplete,
     '<{(<<([<[{<{{{()[]}<<>{}>}(({}<>)(<>()))}{{((){})([]<>)}<{()<>}[<>[]]>}>{[<{{}<>}>(<<>[]>[{}',
     '<{(<<([<[{{[([', nil},
    {:incomplete,
     '[[(<<<{{[[<<<[[]<>][[]<>]>{{<>{}}}><<{[][]}{()}>>>]]}[([{<<[{}{}]<{}<>>>>[(<()[]>{()()})]}]([[(<',
     '[[(<<<{[(([[(<', nil},
    {:incomplete,
     '<(({[<[<{{{<[[<>{}]]{((){}){<>[]}}>(([{}<>][{}<>])[[[]()]<()()>])}(<[<[]{}>{<>{}}]><<(<>()){<>()}>([()[]]{<>(',
     '<(({[<[<{{(<({(', nil},
    {:incomplete,
     '(([[(<{[([({[[{}()]{[]{}}][{{}<>}<{}<>>]})([[[<><>]<<>>]][([[][]])])][<<[[()<>]{<>{}}]<[{}()](()())>>{[(',
     '(([[(<{[([<{[(', nil},
    {:incomplete,
     '[{{<<{<({({[(<<><>><<>[]>){[[]{}](()())}][((<><>){<>[]})(({}<>){[]()})]}<(({[]()})(<[]()><{}[]>))(<',
     '[{{<<{<({(<(<', nil},
    {:incomplete,
     '{(<{<[<[<[<[[<()[]>(<>{})]{(<>{})<<><>>}]>[({[<><>]})[<<{}<>>{<>{}}>]]]<[[<{{}()}(<>[])>]]<{{<()[]',
     '{(<{<[<[<<<{{<', nil},
    {:incomplete,
     '{[{((<<<<[<{({()<>})}>{<(({}<>)){{()()}{{}{}}}>[<[{}()][<>()]>[[<>{}]{[]()}]]}]({{[<<>{}>(<>[])',
     '{[{((<<<<({{[', nil},
    {:incomplete,
     '[({<{(([<<([([[]()]<{}[]>)<{{}()}<<>[]>>]{[{{}}<[]>]{{[][]}(<>())}})[[{<[]{}>{()<>}}<(<>{})(<>{})>][',
     '[({<{(([<<[[', nil},
    {:incomplete,
     '{<(<{[{[{(((<{{}[]}{[]()}>)[{{<>[]}{<>[]}}((()[])<<>()>)]))(({[{<><>}<[]{}>][{[]()}]}<<{<>}[<>()]>(<[][]>{[]{',
     '{<(<{[{[{((<({{', nil},
    {:incomplete,
     '{[<{{<[[<[[(<([][]){()}>[{{}<>}[[]<>]])<((<><>){<>{}})([<>{}]{{}[]})>](<[{()<>}[<>{}]]>{<<[]',
     '{[<{{<[[<[({<<', nil},
    {:incomplete,
     '{<(<<[[[<{({{{[][]}{()}}[{{}<>}{[]<>}]}<([[]{}]{[]()})[(()<>)([][])]>)}>]]]>>[<{[<{[<[([{}{}]([]<>))[[',
     '{<([<{[<{[<[[[', nil},
    {:incomplete,
     '{<({{<{<(<[{[[{}()](<>{})]<{<>()}{<>[]}>}{{[{}{}]}<<{}{}>({}[])>}]({[{()()}[()[]]]}[<{()()}{{}{}}>[<()[]',
     '{<({{<{<(<([[<', nil},
    {:incomplete,
     '{[[{(([({([([{<>()}[<>{}]])]<<[((){})({}<>)]><[[[]<>](<>[])][<()>[[]()]]>>)})])<[{<[<<<[[]]>{<<><',
     '{[[{(<[{<[<<{<<', nil},
    {:incomplete,
     '{<[[<[<<{[{<({[][]}[(){}]){<()<>>[{}<>]}><([[]{}][()[]])[<()()><()[]>]>}({[{[][]}][[{}{}]]}[[{(){}}<<>[]>',
     '{<[[<[<<{[([[', nil},
    {:incomplete,
     '({(<{[[{<<<(([{}()]<(){}>)[[{}<>]<<>[]>]){<{[]<>}(()<>)>}><{({[][]}(())){<()()>(<><>)}}>>([<([{}[]][<>()',
     '({(<{[[{<([<([', nil},
    {:incomplete,
     '<{<(([(<({[<{((){})<{}()>}[[[]<>]{[]()}]>({({}[])<(){}>})]{[{[()]{{}[]}}<[{}()][[]{}]>]}})>)[<<([({<',
     '<{<(([[<<([({<', nil},
    {:incomplete,
     '[[(<<<{{<{<<([<>()]{{}{}})[[<><>][<>[]]]>>[[([<>[]][[]{}])({[]{}})]<[<{}{}>[()<>]]>]}{(<[{{}[]}{',
     '[[(<<<{{<{(<[{', nil},
    {:incomplete,
     '<[<{{<([<{<{[{[]}({}<>)][(<>())]}<<[()[]](()[])>{<{}()>[()[]]}>>(<{((){})[{}()]}>((((){})((){',
     '<[<{{<([<{(((({', nil},
    {:incomplete,
     '([<{<{[<[[<<{(<>[])}[<<>[]>{[][]}]>>]<({<(()())([]())>(({}<>)<[]()>)}{({(){}}([]{}))[{<><>}<<><',
     '([<{<{[<[<({[<<', nil},
    {:incomplete,
     '{[<({<[[[[{<{<<>{}><<><>>}{[<><>]({}<>)}>((((){})[{}<>])[{()<>}{{}[]}])}({(<[]()><{}()>)}{(',
     '{[<({<[[[[({(', nil},
    {:incomplete,
     '[((((({{<[{({[{}[]]{{}()}}{(<>())[[]<>]})}(<{<()[]><[]{}>}>{<[[]()]<(){}>><{[]}{[][]}>})][<{((',
     '[((((({{<[<{((', nil},
    {:incomplete,
     '{[(((([[[([{<{()[]}(()[])>((()<>)[<><>])}]([([{}()][[]()])[{{}<>}{(){}}]]({({}{})<{}{}>}<{{}[]}<{}<>>>)',
     '{[(((([[[((', nil},
    {:incomplete,
     '[<<(([<{<{[[{{[]<>}{{}()}}<[<>()]<<><>>>]({({}())(())}([{}{}]<{}()>))]{<((<><>){<><>}){(()())}>}}({{([',
     '[<<(([<{<({{([', nil},
    {:incomplete,
     '({([<[((([{([<()()>[()<>]])(<{[][]}<{}[]>><[()<>]{<>[]}>)}({[{<>{}}{[]{}}][([][])]}[{{<><>}}<[{}{',
     '({([<[((([([<[{', nil},
    {:incomplete,
     '{[{(<[[[{<([({{}()}(<>[]))<[[]<>][[]<>]>][<(<><>)<<>{}>><[[]{}]{<>{}}>])(([<[][]>{{}()}]<{',
     '{[{(<[[[{<((<{', nil},
    {:incomplete,
     '{<<(<<{<<([{[<{}[]><{}[]>]{{{}{}}{[]()}}}(<[[]{}][[]<>]><[()()]>)]){(([(<><>)([][])](<{}()>)){([<>{}](<>',
     '{<<(<<{<<{({((', nil},
    {:incomplete,
     '[<([(<<{({<[<[(){}]{(){}}><<{}[]>(<>())>]>({([<><>]({}<>)){([])[{}[]]}}[[<[]><{}>]])}){<{<<{[]<>}[{}[]]>>}{((',
     '[<([(<<{{<{((', nil},
    {:incomplete,
     '([([<<<[[[[<{{[]()}}[[<>()][[]()]]>{({{}{}}<[]()>)}]]][({([({}{})[{}<>]])[{<[]>{()()}}{(()[])',
     '([([<<<[[({[{', nil},
    {:incomplete,
     '[{<{<{{([[[[[([])({})](([]()){<>{}})]<[{{}{}}[{}{}]][<()()>(<>{})]>]]]([([<[{}[]]<()>>[({}[])(<>())]](',
     '[{<{<{{(([((', nil},
    {:incomplete,
     '<(<{({{((<<[({[][]}[<><>])]><<{[{}]<[]<>>}[<[]<>>]>([{{}[]}({}<>)][[[][]]{[]()}])>>((([{(){}}[(){}]])({<()<>',
     '<(<{({{((((({<', nil},
    {:incomplete,
     '<{(<<(<({[<{([{}]{[]{}})[<()[]><{}[]>]}>(([({}[])]<(()<>)[()()]>)<[{[]()}<<>()>](<(){}>[{}{}])>)]}<{({[{[]<>}',
     '<{(<<(<(<{({[', nil},
    {:incomplete,
     '[(({([({[<[{({[][]}<()()>)<(<>{})[{}()]>}{<{{}<>}<{}[]>>([<>()](<>))}]>[[((<[]>[[]<>]){({}())((){})})][([[(',
     '[(({([({[[[([[(', nil},
    {:incomplete,
     '{{<{([{<[([<{(<>[])<{}{}>}[{(){}}(<>())]>[(<{}<>>[{}<>])((<><>)[()[]])]]<(({{}{}}<{}[]>)<[{}',
     '{{<{([{<[(<(<[', nil},
    {:incomplete,
     '{(((((({((([{((){})([]<>)}(<{}{}>(<>()))]<<{<>[]}<<>()>>>){{<([]())[{}{}]>[(()())<(){}>]}<<{{',
     '{(((((({(({<<{{', nil},
    {:incomplete,
     '<<[<{<[[({(<<(()()){{}{}}>>[{<(){}>({}())}{<{}()>[[]<>]}])[{{({}<>)<<>()>}<{{}()}<{}<>>>}[{[{}{}]',
     '<<[<{<[[({[[{', ...},
    {:incomplete,
     '[[[[([<<{[{({[{}<>][{}<>]}([()[]]<[][]>))(<([])>)}{{({<><>}[{}()])(<<>()><[]()>)}{((<>[])<',
     ...}
  ]
]
[
  completed_symbols: ['}]]])))}])>>]}', '}>}>}]>})}]})', ']]}]})>]}}}]}]',
   '])}>]})}>)>])}', '}>}}}}]]]}]})', '>>])]))>>>>))}', '}}})}}}}>])}',
   ')]})>}>]})]>})', ')}>])])>}}>>>', '>}]]>)>}}]]>', '>)>]>>]}}))>>}}',
   '])]}}]>])>>)}>', '>)]]))]}>>>)]]', ')})>)}}>]>]}))>', ')]}>])]}>)]]))',
   '>)>)})>}>>}}]', '>}}>>>]>]>}>)}', ']}})>>>>))}]}', ']]>>]))}>})]',
   '}})>))}]}]}>)>}', '>>})]>]]>}}>]}', ']]]>]}>]}>])>}', '>]])>)>}>}})>}',
   '>>}>>]>}]>)}]]}', ']])]}>>]>]]>}', '])>])>}]]}>)})', '>})])>>]]))>}>',
   '}]>)}>}}>>>)]]', '}))))}>])>}}>]>', '>>]})>]>]}>}>])', ')})]]]]>})>]}',
   '))}>]>}})))))]', '))]]]))))]}', '])}})>}>]))>>]', '}]>])])))]>])})',
   '}>))>}]]]>)}]}', '))})}>>}>>)>>}', '))}>}}>>)])>]', '}]})]]>>>])])',
   '))]))}}>}>}]', '>})))))}})}>)>', ']})}>)>)>>)}>', ')]])]]]})])}))]',
   ']>)>)]>}])}>}}', '}}>>}))}))))))}', '}]]})]]>}>]>>', '>)}}]}>>])]]]]']
]
[
  completed_score: [4270054363, 966244816, 3102308567, 2876310558, 964336066,
   5971249908, 182324308, 1874572866, 434171124, 229639814, 26756926243,
   2819490544, 5246703037, 10222232909, 1899044681, 1067731217, 5810384233,
   667966463, 126739957, 22425211798, 6021296113, 3071840298, 5487092923,
   30269419813, 601165323, 2904180541, 5687460244, 4363187412, 19841592989,
   29950356111, 405280238, 1656144532, 12691413, 2865147747, 21840337166,
   4706446463, 1628890248, 331560297, 862343411, 63027992, 5676307359,
   652099919, 9106507282, 3508960493, 23176425783, 856061824, 5308194687]
]
```

```output
2904180541
```
